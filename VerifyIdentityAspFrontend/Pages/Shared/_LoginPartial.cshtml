@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using VerifyIdentityAspFrontend.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    string displayName = "";
    if (SignInManager.IsSignedIn(User))
    {
        var user = await UserManager.Users
            .Include(u => u.Person)
            .FirstOrDefaultAsync(u => u.Id == UserManager.GetUserId(User));

        if (user?.Person?.FirstName != null)
        {
            var name = user.Person.FirstName;
            displayName = $"{char.ToUpper(name[0])}{name.Substring(1).ToLower()}!";
        }
        else
        {
            displayName = user?.Email ?? "User";
        }
    }
}



<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @displayName</a>
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
